openapi: 3.0.1
info:
  title: Asset Ownership Service
  description: >-
    The Asset Ownership Service provides APIs for Retrieving customer ownership
    information about Zebra assets.  It also contains APIs for ownership tokens.
  version: 1.0.0-oas3
servers:
  - url: 'https://dev-api.zebra.com/v2/aos'
    description: Development Environment
  - url: 'https://test-api1.zebra.com/v2/aos'
    description: Test Environment
  - url: 'https://perf-api.zebra.com/v2/aos'
    description: Load Test Environment
  - url: 'https://stage-api.zebra.com/v2/aos'
    description: Stage Environment
  - url: 'https://api.zebra.com/v2/aos'
    description: Prod Environment
tags:
  - name: Assets
    description: >-
      To find Assets, their classes, Justifications,
      and IDs
  - name: Tokens
    description: To manage tenant's token
paths:
  /assets:
    get:
      tags:
        - Assets
      description: Gets a list of asset classes that are in use
      operationId: getAssetClasses
      summary: Get the asset classes in use
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/assets/class/{assetClass}':
    get:
      tags:
        - Assets
      description: Retrieves assets by asset class in a paginated fashion
      operationId: getByAssetClass
      summary: Get assets by asset class
      parameters:
        - name: assetClass
          in: path
          description: >-
            The class of the asset you want to retrieve information about (e.g.
            HANDHELD, PRINTER)
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: What page to retrieve
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: >-
            The maximum amount of results returned. The default and maximum
            limit is 100.
          required: false
          schema:
            type: integer
            format: int32
        - name: brief
          in: query
          description: >-
            Default false, if true only the first justification in the
            justifications list is returned with the results
          required: false
          schema:
            type: boolean
        - name: t
          in: query
          description: >-
            The tenant you wish to see devices for.  * is all devices, defaults
            to your own tenant if not provided.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SliceAssetDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/assets/class/{assetClass}/asset/{assetId}':
    get:
      tags:
        - Assets
      description: Retrieves a particular asset
      summary: Retrieve a particular asset
      operationId: getByAssetClassAndId
      parameters:
        - name: assetClass
          in: path
          description: >-
            The class of the asset you want to retrieve information about (e.g.
            HANDHELD, PRINTER)
          required: true
          schema:
            type: string
        - name: assetId
          in: path
          description: >-
            The ID of the asset you are updating.  For an EMC handheld device,
            this is in the form of model_serialNumber.
          required: true
          schema:
            type: string
        - name: brief
          in: query
          description: >-
            Default false, if true only the first justification in the
            justifications list is returned with the results
          required: false
          schema:
            type: boolean
        - name: t
          in: query
          description: >-
            The tenant you wish to see devices for.  * is all devices, defaults
            to your own tenant if not provided.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/assets/class/{assetClass}/asset/{assetId}/justification/{justification}':
    get:
      tags:
        - Assets
      description: Retrieves a particular justification on an asset
      summary: Retrieve a justification for an asset
      operationId: getByAssetClassAndIdAndJustification
      parameters:
        - name: assetClass
          in: path
          description: >-
            The class of the asset you want to retrieve information about (e.g.
            HANDHELD, PRINTER)
          required: true
          schema:
            type: string
        - name: assetId
          in: path
          description: >-
            The ID of the asset you are updating.  For an EMC handheld device,
            this is in the form of model_serialNumber.
          required: true
          schema:
            type: string
        - name: justification
          in: path
          description: The ID of the particular justification on the asset
          required: true
          schema:
            type: string
        - name: t
          in: query
          description: >-
            The tenant you wish to see devices for.  * is all devices, defaults
            to your own tenant if not provided.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetJustificationJson'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /token:
    get:
      tags:
        - Tokens
      description: Create and get unique token based on the user's tenant
      summary: Creates a unique token
      operationId: getToken
      parameters:
        - name: timeToLive
          in: query
          description: >-
            The date-time of when the token expires, defined in days starting
            from the date when specified
          required: false
          schema:
            type: integer
            format: int32
            default: 1
            minimum: 1
            maximum: 365
        - name: useCount
          in: query
          description: >-
            A value that defines how many times token can be used (i.e. register
            device to a tenant)
          required: false
          schema:
            type: integer
            format: int32
            default: 1
            minimum: 1
            maximum: 1000000
        - name: t
          in: query
          description: >-
            The tenant you wish to see devices for.  * is all devices, defaults
            to your own tenant if not provided.
          required: false
          schema:
            type: string
        - name: unlimitedUses
          in: query
          description: If 'true' then token can be used an unlimited amount of times
          required: false
          schema:
            type: string
            default: 'false'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
components:
  schemas:
    ApiError:
      type: object
      properties:
        error:
          type: string
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
        status:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        debugMessage:
          type: string
    AssetDTO:
      required:
        - assetClass
        - id
      type: object
      properties:
        justifications:
          type: array
          items:
            $ref: '#/components/schemas/AssetJustificationJson'
        assetClass:
          description: 'The type of asset (e.g. handheld, reader, printer)'
          type: string
        id:
          description: 'The asset''s primary identifier, usually serial number'
          type: string
        lastModified:
          readOnly: true
          type: string
          format: date-time
        lastModifiedBy:
          readOnly: true
          type: string
    AssetJustificationJson:
      required:
        - confidence
        - accountNumber
        - token
      type: object
      properties:
        accountNumber:
          description: Required either/or with token
          type: string
        token:
          description: Required either/or with account number
          type: string
        confidence:
          description: >-
            How confident we are that the customer owns the device based on this
            information
          maximum: 100
          minimum: 0
          type: integer
          format: int32
        justification:
          type: string
        regions:
          uniqueItems: true
          type: array
          items:
            type: string
        tags:
          uniqueItems: true
          type: array
          items:
            type: string
        lastModified:
          readOnly: true
          type: string
          format: date-time
        lastModifiedBy:
          readOnly: true
          type: string
        createdBy:
          readOnly: true
          type: string
    PageableAssetDTO:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortAssetDTO'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SliceAssetDTO:
      type: object
      properties:
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AssetDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortAssetDTO'
        first:
          type: boolean
        pageable:
          $ref: '#/components/schemas/PageableAssetDTO'
        last:
          type: boolean
        empty:
          type: boolean
    SortAssetDTO:
      type: object
      properties:
        unsorted:
          type: boolean
        sorted:
          type: boolean
        empty:
          type: boolean
    TokenDTO:
      type: object
      properties:
        token:
          pattern: '\w{4}-\w{4}-\w{4}-\w{4}'
          type: string
        timeToLive:
          type: integer
        useCount:
          type: integer
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Token from 2 legged oauth or 3 legged oauth authentication APIs
  responses:
    UnauthorizedError:
      description: >-
        User does not have access to the Savanna Base Platform Apigee Product -
        use the Developer portal to get access.
    ForbiddenError:
      description: >-
        User does not have Savanna Authorization rule access to that particular
        API.
    NotFoundError:
      description: No objects found in database matching the criteria of the request.
security:
  - ApiKeyAuth: []
  - bearerAuth: []